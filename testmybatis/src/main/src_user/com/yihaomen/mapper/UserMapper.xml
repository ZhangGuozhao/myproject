<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--<mapper namespace="com.yihaomen.mybatis.models.UserMapper">-->
<!--namespace 要和IuserOperationMapper接口对应！！！-->
<!--IuserOperation 对应selectUserById2-->
<mapper namespace="com.yihaomen.inter.UserMapper">
    <!--id  都应Mapper类里的方法名；parameterType对应方法名里的（参数类型），resultType对应返回再行-->
    <select id="selectUserByID" parameterType="int" resultType="User">
        select * from `user` where id = #{id}
    </select>

    <!-- 为了返回list 类型而定义的returnMap -->
    <resultMap id="resultListUser" type="User">
        <id column="id" property="id"/>
        <result column="userName" property="userName"/>
        <result column="userAge" property="userAge"/>
        <result column="userAddress" property="userAddress"/>
    </resultMap>

    <!-- 返回list 的select 语句，注意 resultMap 的值是指向前面定义好的 -->
    <select id="selectUsers" parameterType="string" resultMap="resultListUser">
        select * from user where userName like #{userName}
    </select>

    <!--增加User-->
    <insert id="addUser" parameterType="User"
            useGeneratedKeys="true" keyProperty="id">
        insert into user(userName,userAge,userAddress)
        values(#{userName},#{userAge},#{userAddress})
    </insert>

    <!--删除User-->
    <delete id="deleteUser" parameterType="int">
        delete from user where id=#{id}
    </delete>

    <!-- User 联合文章进行查询 方法之一的配置 (多对一第一种方式)  -->
    <resultMap id="resultUserArticleList1" type="Article">
        <id property="id" column="aid"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <!-- 用association 来得到关联的用户，这是多对一的情况 -->
        <association property="user" javaType="User">
            <id property="id" column="id"/>
            <result property="userName" column="userName"/>
            <result property="userAddress" column="userAddress"/>
        </association>
    </resultMap>

    <!--查询某个user下的article 多对一 第一种方式 -->
    <select id="getUserArticles1" parameterType="int" resultMap="resultUserArticleList1">
        select user.id,user.userName,user.userAddress,article.id aid,article.title,article.content from user,article
        where user.id=article.userid and user.id=#{id}
    </select>

    <!-- User 联合文章进行查询 方法之二的配置 (多对一 第二种方式) -->
    <resultMap id="resultUserArticleList2" type="Article">
        <id property="id" column="aid" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <!--将 association  中对应的映射独立抽取出来，可以达到复用的目的。-->
        <association property="user" javaType="User" resultMap="resultListUser" />
    </resultMap>

    <!--查询某个user下的article 多对一 第二种方式 -->
    <select id="getUserArticles2" parameterType="int" resultMap="resultUserArticleList2">
        select user.id,user.userName,user.userAddress,article.id aid,article.title,article.content from user,article
        where user.id=article.userid and user.id=#{id}
    </select>

    <!-- 分页查询某个user下的article测试 -->
    <select id="selectArticleListPage" resultMap="resultUserArticleList2">
        select user.id,user.userName,user.userAddress,article.id aid,article.title,article.content from user,article
        where user.id=article.userid and user.id=#{userid}
    </select>
</mapper>